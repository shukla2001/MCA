11.1:

SQL> CREATE OR REPLACE PROCEDURE Cal_Int(
  2      p_principal IN NUMBER,
  3      p_rate IN NUMBER,
  4      p_years IN NUMBER,
  5      p_interest OUT NUMBER
  6  ) AS
  7  BEGIN
  8
  9      p_interest := (p_principal * p_rate * p_years) / 100;
 10  END Cal_Int;
 11  /

Procedure created.

SQL> DECLARE
  2      principal NUMBER := &principal;
  3      interest NUMBER := &interest;
  4      years NUMBER := &years;
  5      cal_interest NUMBER;
  6
  7  BEGIN
  8      Cal_Int(principal, interest,years, cal_interest);
  9      DBMS_OUTPUT.PUT_LINE('Simple Interest: ' || cal_interest);
 10  END;
 11  /
Enter value for principal: 5000
old   2:     principal NUMBER := &principal;
new   2:     principal NUMBER := 5000;
Enter value for interest: 2
old   3:     interest NUMBER := &interest;
new   3:     interest NUMBER := 2;
Enter value for years: 3
old   4:     years NUMBER := &years;
new   4:     years NUMBER := 3;
Simple Interest: 300

PL/SQL procedure successfully completed.


11.2:

SQL> CREATE OR REPLACE PROCEDURE display_proj
  2  (dept_name IN dept.dno%type)
  3  AS
  4      v_dept_id VARCHAR2(3); -- Match the data type of dno
  5  BEGIN
  6      -- Find the department ID based on the given department name
  7      SELECT dno
  8      INTO v_dept_id
  9      FROM dept
 10      WHERE dname = dept_name;
 11
 12      -- Cursor to fetch project and employee information
 13      FOR project_rec IN (
 14          SELECT p.prj_name, e.ename
 15          FROM proj p
 16          JOIN emp e ON p.prj_no = e.prj_id
 17          WHERE p.dno = v_dept_id
 18      ) LOOP
 19          DBMS_OUTPUT.PUT_LINE('Project: ' || project_rec.prj_name);
 20          DBMS_OUTPUT.PUT_LINE('Employee: ' || project_rec.ename);
 21      END LOOP;
 22
 23      EXCEPTION
 24          WHEN NO_DATA_FOUND THEN
 25              DBMS_OUTPUT.PUT_LINE('Department not found: ' || dept_name);
 26  END display_proj;
 27  /

Procedure created.

SQL> execute display_proj('HR');
Project: Project_E
Employee: Manu
Project: Project_E
Employee: Mahesh

PL/SQL procedure successfully completed.


11.3:

SQL> CREATE OR REPLACE FUNCTION Cal_Age(date_of_birth IN DATE) RETURN NUMBER IS
  2      v_age NUMBER;
  3  BEGIN
  4      v_age := FLOOR(MONTHS_BETWEEN(SYSDATE, date_of_birth) / 12);
  5      RETURN v_age;
  6  END Cal_age;
  7  /

Function created.

SQL>
SQL> func2:
SP2-0042: unknown command "func2:" - rest of line ignored.
SQL> CREATE OR REPLACE FUNCTION Cal_Exp(join_date IN DATE) RETURN NUMBER IS
  2      v_exp NUMBER;
  3  BEGIN
  4      v_exp := FLOOR(MONTHS_BETWEEN(SYSDATE, join_date) / 12);
  5      RETURN v_exp;
  6  END Cal_Exp;
  7  /

Function created.

SQL> DECLARE
  2     e_no emp.empno%type;
  3     name emp.ename%type;
  4     dob emp.date_birth%type;
  5     join_d emp.date_join%type;
  6      v_age number(10,2);
  7     v_exp number(10,2);
  8
  9  begin
 10     e_no := &Employee_Number;
 11     select ename,date_birth,date_join into name,dob,join_d from emp where empno = e_no;
 12     v_age := Cal_Age(dob);
 13     v_exp := Cal_Exp(join_d);
 14     dbms_output.put_line('Ename' || '---' || 'AGE' || '---' || 'Service');
 15     dbms_output.put_line( name || '---' || v_age || '---' || v_exp);
 16  END;
 17  /
Enter value for employee_number: 106
old  10:        e_no := &Employee_Number;
new  10:        e_no := 106;
Ename---AGE---Service
PRASHANT---37---36




11.4:

SQL> CREATE OR REPLACE FUNCTION Cal_proj(department_id IN dept.dno%TYPE) RETURN NUMBER IS
  2      v_total_fund NUMBER := 0;
  3  BEGIN
  4      SELECT SUM(p.prj_fund)
  5      INTO v_total_fund
  6      FROM proj p
  7      WHERE p.dno = department_id;
  8
  9      RETURN v_total_fund;
 10  END Cal_proj;
 11  /

Function created.

SQL> DECLARE
  2      v_deptno dept.dno%TYPE;
  3      v_total_fund NUMBER;
  4      CURSOR dept_cursor IS
  5          SELECT dno, dname FROM dept;
  6  BEGIN
  7      FOR dept_rec IN dept_cursor LOOP
  8          v_deptno := dept_rec.dno;
  9          v_total_fund := Cal_Proj(v_deptno);
 10          DBMS_OUTPUT.PUT_LINE(dept_rec.dname || ' department has received Rs. ' || v_total_fund || '/-');
 11      END LOOP;
 12  END;
 13  /
Marketing department has received Rs. 900000/-
Research department has received Rs. 1100000/-
IT department has received Rs. 300000/-
HR department has received Rs. 700000/-
Accounts department has received Rs. /-
Corporate department has received Rs. /-
Management department has received Rs. /-
Asset department has received Rs. 800000/-

PL/SQL procedure successfully completed.




11.5:




CREATE OR REPLACE PACKAGE Emp_pack AS

    PROCEDURE Cal_sum(
        p_deptname IN VARCHAR2,
        p_salary_sum OUT NUMBER
    );

    FUNCTION GetEmp_proj(
        p_prj_name IN VARCHAR2
    ) RETURN NUMBER;
END Emp_pack;
/

CREATE OR REPLACE PACKAGE BODY Emp_pack AS
   
    PROCEDURE Cal_sum(
        p_deptname IN VARCHAR2,
        p_salary_sum OUT NUMBER
    ) IS
    BEGIN
        SELECT SUM(sal)
        INTO p_salary_sum
        FROM emp
        WHERE deptno = p_deptname;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            p_salary_sum := 0; -- Department not found or no employees
    END Cal_sum;

    FUNCTION GetEmp_proj(
        p_prj_name IN VARCHAR2
    ) RETURN NUMBER IS
        v_employee_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_employee_count
        FROM proj
        WHERE prj_name = p_prj_name;
        RETURN v_employee_count;
    END GetEmp_proj;
END Emp_pack;
/




SQL> SET SERVEROUTPUT ON
SQL> DECLARE
  2      p_salary_sum NUMBER;
  3      v_employee_count NUMBER;
  4      project_employees NUMBER;
  5  BEGIN
  6      -- Call the procedure to find the sum of salaries in the specified department
  7      Emp_pack.Cal_sum('&p_deptname', p_salary_sum);
  8      DBMS_OUTPUT.PUT_LINE('Total Salary in ' || '&p_deptname' || ' department: ' || p_salary_sum);
  9
 10      -- Call the function to find the number of employees in the specified project
 11      project_employees := Emp_pack.GetEmp_proj('&v_employee_count');
 12      DBMS_OUTPUT.PUT_LINE('Number of Employees in ' || '&v_employee_count' || ': ' || project_employees);
 13  END;
 14  /
Enter value for p_deptname: D2
old   7:     Emp_pack.Cal_sum('&p_deptname', p_salary_sum);
new   7:     Emp_pack.Cal_sum('D2', p_salary_sum);
Enter value for p_deptname: D2
old   8:     DBMS_OUTPUT.PUT_LINE('Total Salary in ' || '&p_deptname' || ' department: ' || p_salary_sum);
new   8:     DBMS_OUTPUT.PUT_LINE('Total Salary in ' || 'D2' || ' department: ' || p_salary_sum);
Enter value for v_employee_count: project_A
old  11:     project_employees := Emp_pack.GetEmp_proj('&v_employee_count');
new  11:     project_employees := Emp_pack.GetEmp_proj('project_A');
Enter value for v_employee_count: project_A
old  12:     DBMS_OUTPUT.PUT_LINE('Number of Employees in ' || '&v_employee_count' || ': ' || project_employees);
new  12:     DBMS_OUTPUT.PUT_LINE('Number of Employees in ' || 'project_A' || ': ' || project_employees);
Total Salary in D2 department: 268000
Number of Employees in project_A: 2

PL/SQL procedure successfully completed.

