10.1:

SQL> CREATE TABLE SAL_MOD (
  2      Empno NUMBER,
  3      Dname VARCHAR2(50),
  4      Old_Sal NUMBER,
  5      Mod_Date DATE,
  6      Modifier VARCHAR2(50)
  7  );

Table created.


SQL> CREATE OR REPLACE TRIGGER sal_up
  2  AFTER UPDATE OF sal ON emp
  3  FOR EACH ROW
  4  DECLARE
  5     dept_name dept.dname%type;
  6  BEGIN
  7     SELECT dname INTO dept_name FROM dept WHERE dno = :old.deptno;
  8     IF UPDATING('sal') THEN
  9         DBMS_OUTPUT.PUT_LINE('Emp no = ' || :old.empno || '-- Old salary = ' || :old.sal || '-- New salary = ' || :new.sal || ' Department = ' || dept_name);
 10         INSERT INTO sal_mod VALUES(:old.empno, dept_name, :old.sal, SYSDATE, USER);
 11     END IF;
 12  END;
 13  /

Trigger created.


SQL> update emp set sal = 25000 where empno = 106;
Emp no = 106-- Old salary = -- New salary = 25000 Department = Research

1 row updated.

SQL> select * from sal_mod;

     EMPNO DNAME                                                 OLD_SAL
---------- -------------------------------------------------- ----------
MOD_DATE  MODIFIER
--------- --------------------------------------------------
       106 Research
04-NOV-23 MCA158

       106 Research                                                25000
04-NOV-23 MCA158

       123 IT                                                      35000
03-NOV-23 MCA158


     EMPNO DNAME                                                 OLD_SAL
---------- -------------------------------------------------- ----------
MOD_DATE  MODIFIER
--------- --------------------------------------------------
       123 IT                                                      35000
03-NOV-23 MCA158

       123 IT                                                      35000
03-NOV-23 MCA158







10.2:



SQL> set serveroutput on;
SQL> CREATE OR REPLACE TRIGGER additional_fund_trigger
  2  AFTER UPDATE ON proj
  3  FOR EACH ROW
  4  DECLARE
  5      v_project_duration NUMBER;
  6      v_additional_fund NUMBER;
  7      v_message VARCHAR2(200);
  8  BEGIN
  9      -- Calculate project duration lapsed
 10      v_project_duration := (SYSDATE - :OLD.strt_date);
 11
 12      -- Calculate additional fund based on criteria
 13      IF v_project_duration < (:NEW.end_date - :OLD.strt_date) * 0.5 THEN
 14          v_additional_fund := :NEW.Prj_fund * 0.7;
 15          v_message := 'You are eligible for Rs. ' || TO_CHAR(v_additional_fund, '999999.99');
 16      ELSE
 17          v_additional_fund := :NEW.Prj_fund * 0.4;
 18          v_message := 'You are eligible for Rs. ' || TO_CHAR(v_additional_fund, '999999.99');
 19      END IF;
 20
 21      -- Display the eligibility message
 22      DBMS_OUTPUT.PUT_LINE(v_message);
 23  END;
 24  /

Trigger created.

SQL> select * from proj;

DNO PRJ_N PRJ_NAME             PRJ_CREDIT STRT_DATE END_DATE    PRJ_FUND
--- ----- -------------------- ---------- --------- --------- ----------
D1  P1    Project_A                     4 21-OCT-22 28-SEP-23     400000
D2  P1    Project_B                     2 29-AUG-23 29-SEP-23     200000
D3  P2    Project_C                     3 30-AUG-23 30-SEP-23     300000
D1  P3    Project_D                     5 01-SEP-23 01-OCT-23     500000
D4  P2    Project_E                     7 02-SEP-23 02-OCT-23     700000
D7  P2    Project_F                     7 03-SEP-23 03-OCT-23     800000
D2  P3    Project_k                     7 03-SEP-23 03-OCT-23     800000

7 rows selected.

SQL> update proj set prj_fund = prj_fund + 50000 where dno='D2';
You are eligible for Rs.  100000.00
You are eligible for Rs.  340000.00

2 rows updated.

SQL> select * from proj;

DNO PRJ_N PRJ_NAME             PRJ_CREDIT STRT_DATE END_DATE    PRJ_FUND
--- ----- -------------------- ---------- --------- --------- ----------
D1  P1    Project_A                     4 21-OCT-22 28-SEP-23     400000
D2  P1    Project_B                     2 29-AUG-23 29-SEP-23     250000
D3  P2    Project_C                     3 30-AUG-23 30-SEP-23     300000
D1  P3    Project_D                     5 01-SEP-23 01-OCT-23     500000
D4  P2    Project_E                     7 02-SEP-23 02-OCT-23     700000
D7  P2    Project_F                     7 03-SEP-23 03-OCT-23     800000
D2  P3    Project_k                     7 03-SEP-23 03-OCT-23     850000

7 rows selected.


SQL> CREATE OR REPLACE TRIGGER weekday
  2  BEFORE INSERT OR UPDATE OR DELETE ON emp
  3  FOR EACH ROW
  4  DECLARE
  5      v_day VARCHAR2(20);
  6  BEGIN
  7      SELECT TO_CHAR(SYSDATE, 'D') INTO v_day FROM DUAL;
  8      IF v_day IN ('6', '7') THEN
  9          RAISE_APPLICATION_ERROR(-20001, 'Operations not allowed on weekends.');
 10      END IF;
 11      DBMS_OUTPUT.PUT_LINE('User ' || USER || ' initiated the operation on ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
 12  END;
 13  /

Trigger created.

SQL> UPDATE emp SET sal = 6000 WHERE empno = 133;
UPDATE emp SET sal = 6000 WHERE empno = 133
       *
ERROR at line 1:
ORA-20001: Operations not allowed on weekends.
ORA-06512: at "MCA158.WEEKDAY", line 6
ORA-04088: error during execution of trigger 'MCA158.WEEKDAY'


